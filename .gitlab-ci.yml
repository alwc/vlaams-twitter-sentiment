stages:
  - build
  - test
  - deploy
  - destroy

# Extends
# https://docs.gitlab.com/ee/ci/yaml/#extends

.feature:
  image: $CI_REGISTRY_IMAGE:feature
  except:
    refs:
      - development
      - acceptance
      - master

.development:
  image: $CI_REGISTRY_IMAGE:development
  only:
    refs:
      - development

.acceptance:
  image: $CI_REGISTRY_IMAGE:acceptance
  only:
    refs:
      - acceptance

.production:
  image: $CI_REGISTRY_IMAGE:production
  only:
    refs:
      - master

# Build

.build:
  image: docker:stable
  services:
    - docker:dind
  stage: build
  script:
    - echo -n $CI_JOB_TOKEN | docker login --username gitlab-ci-token --password-stdin $CI_REGISTRY
    - docker build --build-arg GIT_TOKEN=$CI_JOB_TOKEN --build-arg ENVIRONMENT=$CI_ENVIRONMENT_NAME --tag $CI_REGISTRY_IMAGE:$CI_ENVIRONMENT_NAME --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA --target build-image .
    - docker push $CI_REGISTRY_IMAGE:$CI_ENVIRONMENT_NAME
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - echo -n $CI_JOB_TOKEN | docker login --username gitlab-ci-token --password-stdin $CI_REGISTRY
    - docker build --build-arg GIT_TOKEN=$CI_JOB_TOKEN --build-arg TWITTER_CONSUMER_KEY=$TWITTER_CONSUMER_KEY --build-arg TWITTER_CONSUMER_SECRET=$TWITTER_CONSUMER_SECRET --build-arg TWITTER_ACCESS_TOKEN_KEY=$TWITTER_ACCESS_TOKEN_KEY --build-arg TWITTER_ACCESS_TOKEN_SECRET=$TWITTER_ACCESS_TOKEN_SECRET --tag $CI_REGISTRY_IMAGE/batch:$CI_ENVIRONMENT_NAME --target app-image .
    - docker push $CI_REGISTRY_IMAGE/batch:$CI_ENVIRONMENT_NAME
  only:
    changes:
      - .gitlab-ci.yml
      - Dockerfile
      - environment*.yml

Build CI image (feature):
  environment:
    name: feature
  extends:
    - .feature
    - .build

Build CI image (development):
  environment:
    name: development
  extends:
    - .development
    - .build

Build CI image (acceptance):
  environment:
    name: acceptance
  extends:
    - .acceptance
    - .build

Build CI image (production):
  environment:
    name: production
  extends:
    - .production
    - .build

# Test

.test:
  stage: test
  script:
    - invoke sentry.create-release
    - invoke lint
    - invoke test
  coverage: '/^TOTAL.*\s+(\d+\%)$/'
  artifacts:
    # expose_as: Test artifacts
    when: always
    untracked: true
    reports:
      junit:
        - reports/**/*.xml

Test package (feature):
  extends:
    - .feature
    - .test

Test package (development):
  extends:
    - .development
    - .test

Test package (acceptance):
  extends:
    - .acceptance
    - .test

Test package (production):
  extends:
    - .production
    - .test

# Deploy

.deploy:
  stage: deploy
  script:
    - invoke serverless.deploy
    - invoke sentry.create-deployment
  artifacts:
    # expose_as: Deploy artifacts
    when: always
    untracked: true
  only:
    # Only ask for deployment for changes in terraform
    changes:
      - terraform/*

Deploy package (feature):
  environment:
    name: feature
  extends:
    - .feature
    - .deploy

Deploy package (development):
  environment:
    name: development
  extends:
    - .development
    - .deploy

Deploy package (acceptance):
  environment:
    name: acceptance
  extends:
    - .acceptance
    - .deploy
  when: manual

Deploy package (production):
  environment:
    name: production
  extends:
    - .production
    - .deploy
  when: manual

# Destroy
# https://docs.gitlab.com/ee/ci/yaml/README.html#protecting-manual-jobs-premium

.destroy:
  stage: destroy
  script:
    - invoke serverless.destroy --no-dry-run
    - invoke terraform.destroy --no-dry-run
  when: manual

Destroy deployment (feature):
  environment:
    name: feature
  extends:
    - .feature
    - .destroy
